<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>花发故年枝 - qlan&#39;s blog</title>
    <link>https://qlan.cc/</link>
    <description>Recent content on 花发故年枝 - qlan&#39;s blog</description>
    <image>
      <url>https://qlan.cc/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://qlan.cc/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>QLAN.CC</copyright>
    <lastBuildDate>Mon, 06 Jun 2022 14:47:16 +0800</lastBuildDate><atom:link href="https://qlan.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 分支命名约定</title>
      <link>https://qlan.cc/post/git%E5%88%86%E6%94%AF%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A/</link>
      <pubDate>Mon, 06 Jun 2022 14:47:16 +0800</pubDate>
      
      <guid>https://qlan.cc/post/git%E5%88%86%E6%94%AF%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A/</guid>
      <description>Git 分支分为集成分支、功能分支和修复分支，分别命名为 develop、feature 和 hotfix。
（1）master 分支 master 为主分支，也是用于部署生产环境的分支。为了确保master分支稳定性，一般由develop、hotfix分支合并，任何时间都不能直接修改代码。
（2）develop 分支 develop为开发分支，始终保持最新完成以及bug修复后的代码。一般开发新功能时，都是基于develop分支创建feature分支的。
（3）feature 分支 feature为功能分支，分为版本功能分支和非版本功能分支。
版本功能分支是根据版本需求分出来的功能分支，这时候命名为： feature/{$version}/{$issue_id}_{$description}
非版本功能分支则是指不跟版本一起上线的功能或者一些不紧急的 bugs，这时候命名为： feature/{$username}/{$issue_id}_{$description}
（4）hotfix 分支 hotfix为修复分支，表示修复紧急线上BUG的分支（不紧急的BUG归为功能分支），命名为：
hotfix/{$username}/{$issue_id}_{$description}
变量 $username 表示开发者 $issue_id 表示issues的id $description 表示分支功能描述亦或issues的标题 参考文献 [1] 科比08. Git分支命名规范(2017-06-05)[2022-06-06]. https://www.cnblogs.com/kobe1991/p/6944747.html
[2] josephlin. Git分支命名约定(2019-12-11)[2022-06-06]. http://josephlin.org/git-styleguide.html</description>
    </item>
    
    <item>
      <title>Seata 部署指南</title>
      <link>https://qlan.cc/post/seata%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 04 Jun 2022 18:25:11 +0800</pubDate>
      
      <guid>https://qlan.cc/post/seata%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</guid>
      <description>环境 Docker - 1.13.1 docker-compose - 1.23.2 seata-server - 1.4.2 Nacos - 2.0.4 步骤 新建seata目录 1 2 mkdir /opt/seata mkdir /opt/seata/config 新建seata服务端配置文件registry.conf 1 vi /opt/seata/config/registry.conf 编写以下配置
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 registry { type = &amp;#34;nacos&amp;#34; nacos { # 服务名称 application = &amp;#34;seata-server&amp;#34; serverAddr = &amp;#34;127.0.0.1:18848&amp;#34; # 命名空间ID namespace = &amp;#34;&amp;#34; group = &amp;#34;SEATA_GROUP&amp;#34; # 集群名称 cluster = &amp;#34;default&amp;#34; } } config { type = &amp;#34;nacos&amp;#34; nacos { serverAddr = &amp;#34;127.</description>
    </item>
    
    <item>
      <title>Git 全局设置</title>
      <link>https://qlan.cc/post/git%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sat, 04 Jun 2022 16:25:38 +0800</pubDate>
      
      <guid>https://qlan.cc/post/git%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE/</guid>
      <description>查看全局设置 1 git config --global -l 设置全局用户名/邮箱 1 2 git config --global user.name &amp;#34;username&amp;#34; git config --global user.email &amp;#34;user@email&amp;#34; 设置全局代理 1 2 3 4 5 git config --global http.proxy http://127.0.0.1:7890 git config --global https.proxy https://127.0.0.1:7890 # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy </description>
    </item>
    
    
    
  </channel>
</rss>
